//========================================================================== //
// Copyright (c) 2020, Stephen Henry
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//========================================================================== //

#ifndef M_TB_TB_H
#define M_TB_TB_H

#include "verilated.h"
#include <vector>
#include <deque>
#include <random>
#include <limits>
#include <string>
#include <algorithm>
#include <type_traits>

#cmakedefine OPT_VCD_ENABLE

#cmakedefine OPT_LOGGING_ENABLE

// Forwards
class Vtb;
#ifdef OPT_VCD_ENABLE
class VerilatedVcdC;
#endif

namespace tb {

struct Options {
#ifdef OPT_VCD_ENABLE
  // Enable wave tracing
  bool vcd_enable = false;

  // Emitted waveform
  std::string vcd_name = "sim.vcd";
#endif
#ifdef OPT_LOGGING_ENABLE
  // Verbose loggic
  bool logging_enable = false;
#endif
};


struct In {
  // Packet validity (false on bubbles)
  bool valid = false;

  // Start of packet
  bool sop = false;

  // End of packet
  bool eop = false;

  // Word length (number of valid bytes)
  vluint8_t length = 0;

  // Word data.
  vluint64_t data = 0;
};

struct Out {
  bool valid = false;
  
  // Start of packet
  bool sop = false;

  // End of packet
  bool eop = false;

  // Word length (number of valid bytes)
  vluint8_t length = 0;

  // Word data
  vluint64_t data = 0;

  // Match buffer valid on EOP
  vluint8_t buffer = 0;
};


struct PacketType {

  vluint16_t off = 0;

  vluint32_t type = 0;
};

struct SymbolMatch {
  // Validity
  bool valid = false;

  // Offset
  vluint8_t off = 0;

  // 8B match word
  vluint64_t match = 0;

  // "Buffer" (Key) on a match operation.
  vluint8_t buffer = 0;
};


struct TestCase {

  std::string to_string() const;

  // Unique test case identifier.
  std::size_t id;

  // Testcase expects a match
  bool should_match = false;

  // Expected match ID
  vluint8_t predicted_match;

  // Total number of bytes in packet.
  std::size_t bytes;

  // Stimulus
  std::deque<In> in;

  // Expected output
  std::deque<Out> out;

  //
  PacketType type;

  // Symbol matches (up to 4).
  std::vector<SymbolMatch> match;
};


// Randomization support
//
struct Random {
  // Initialize random state
  static void init(unsigned seed);

  // Get current random state.
  static std::mt19937& mt() { return mt_; }


  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_integral_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_int_distribution<T> d(lo, hi);
    return d(mt_);
  }

  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_floating_point_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_real_distribution<T> d(lo, hi);
    return d(mt_);
  }

  // Generate a boolean with true probability 'true_prob'.
  static bool boolean(double true_prob = 0.5f);


  template<typename FwdIt>
  static FwdIt select_one(FwdIt begin, FwdIt end) {
    if (begin == end) return end;
    std::advance(begin, Random::uniform(std::distance(begin, end) - 1, 0l));
    return begin;
  }
  
  
 private:
  static inline std::mt19937 mt_;
};

class TB {
  enum class NetState {
    PreReset,
    InReset,
    Active,
    PostActive
  };

  enum class HostState {
    PreReset,
    InReset,
    Active
  };
  
 public:
  TB(const Options& opts = Options());
  virtual ~TB();

  vluint64_t time() const { return time_; }

  void run(std::deque<TestCase>& tests);

 private:

  virtual void on_net_clk_negedge(std::deque<TestCase>& tests);

  virtual void on_host_clk_negedge();


  // Current simulation time
  vluint64_t time_;
  
  // Verilated instance
  Vtb* tb_ = nullptr;
#ifdef OPT_VCD_ENABLE

  // VCD (if applicable)
  VerilatedVcdC* vcd_ = nullptr;
#endif

  // Tb options
  Options opts_;

  struct {
    //
    NetState state = NetState::PreReset;

    //
    vluint8_t reset_ticks;

  } net_context_;

  //
  struct {
    //
    HostState state = HostState::PreReset;

    //
    vluint8_t reset_ticks;

  } host_context_;


  struct {
    // In:
    std::deque<In> actual_in;
    
    // Out:
    std::deque<Out> expected_out;

    // Flag indicating that simulation has completed.
    bool stopped = false;
    
  } sim_context_;
};

}

#endif
